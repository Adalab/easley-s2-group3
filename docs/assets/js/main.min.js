'use strict';
const open = document.querySelectorAll('.bar__menu-card');
const contDesign = document.querySelector('.container__radios');
const contFill = document.querySelector('.container__fill');
const contShare = document.querySelector('.share_btn--container');
const icons = document.querySelectorAll('.ico__arrow-menu');

const resetColapsable = (colapsableNode, arrowIcon) => {
  colapsableNode.classList.add('hidden');
  arrowIcon.classList.remove('ico__arrow--reverse-down');
  arrowIcon.classList.remove('ico__arrow--reverse-up');
};

const rotateArrow = (containerNode, arrowIcon) => {
  if (containerNode.classList.contains('hidden')) {
    arrowIcon.classList.add('ico__arrow--reverse-down');
    arrowIcon.classList.remove('ico__arrow--reverse-up');
  } else {
    arrowIcon.classList.add('ico__arrow--reverse-up');
    arrowIcon.classList.remove('ico__arrow--reverse-down');
  }
};

const arrowFillIcon = icons[1];
const arrowDesignIcon = icons[0];
const arrowShareIcon = icons[2];

const handlerDesign = () => {
  const isDesignClose = contDesign.classList.contains('hidden');
  if (isDesignClose) {
    contDesign.classList.remove('hidden');
    resetColapsable(contFill, arrowFillIcon);
    resetColapsable(contShare, arrowShareIcon);
  } else {
    resetColapsable(contDesign, arrowDesignIcon);
  }

  rotateArrow(contDesign, arrowDesignIcon);
};

const handlerFill = () => {
  const isFillClose = contFill.classList.contains('hidden');
  if (isFillClose) {
    contFill.classList.remove('hidden');
    resetColapsable(contDesign, arrowDesignIcon);
    resetColapsable(contShare, arrowShareIcon);
  } else {
    resetColapsable(contFill, arrowFillIcon);
  }
  rotateArrow(contFill, arrowFillIcon);
};

const handlerShare = () => {
  const isShareClose = contShare.classList.contains('hidden');
  if (isShareClose) {
    contShare.classList.remove('hidden');
    resetColapsable(contDesign, arrowDesignIcon);
    resetColapsable(contFill, arrowFillIcon);
  } else {
    contShare.classList.add('hidden');
  }
  rotateArrow(contShare, arrowShareIcon);
};
open[0].addEventListener('click', handlerDesign);
open[1].addEventListener('click', handlerFill);
open[2].addEventListener('click', handlerShare);

'use strict';
const colors = document.querySelectorAll('.radio__button--color');
const cardData = document.querySelector('.card__data');
const contactIcons = document.querySelectorAll('.contact-icons');

function applyPalette(e) {
  const p = parseInt(e.currentTarget.value);
  const skillsTags = document.querySelectorAll('.card__skills-item');
  dataJason.palette = p;

  if (p === 1) {
    cardData.classList.add('card-data__color1');
    cardData.classList.remove('card-data__color2', 'card-data__color3');
    for (const icon of contactIcons) {
      icon.classList.add('contact-icons__color1');
      icon.classList.remove('contact-icons__color2', 'contact-icons__color3');
    }
    for (const tag of skillsTags) {
      tag.classList.add('card__skills-item__color1');
      tag.classList.remove('card__skills-item__color2', 'card__skills-item__color3');
    }
  } else if (p === 2) {
    cardData.classList.add('card-data__color2');
    cardData.classList.remove('card-data__color1', 'card-data__color3');
    for (const icon of contactIcons) {
      icon.classList.add('contact-icons__color2');
      icon.classList.remove('contact-icons__color1', 'contact-icons__color3');
    }
    for (const tag of skillsTags) {
      tag.classList.add('card__skills-item__color2');
      tag.classList.remove('card__skills-item__color1', 'card__skills-item__color3');
    }
  } else {
    cardData.classList.add('card-data__color3');
    cardData.classList.remove('card-data__color1', 'card-data__color2');
    for (const icon of contactIcons) {
      icon.classList.add('contact-icons__color3');
      icon.classList.remove('contact-icons__color1', 'contact-icons__color2');
    }
    for (const tag of skillsTags) {
      tag.classList.add('card__skills-item__color3');
      tag.classList.remove('card__skills-item__color1', 'card__skills-item__color2');
    }
  }
}

for (const c of colors) {
  c.addEventListener('change', applyPalette);
}

'use strict';

const inputRadio = document.querySelectorAll('.typo__radio');

function applyTypo(e) {
  const q = parseInt(e.currentTarget.value);
  dataJason.typography = q;

  if (q === 1) {
    cardName.classList.remove('typo-2', 'typo-3');
    cardJob.classList.remove('typo-2', 'typo-3');
  } else if (q === 2) {
    cardName.classList.add('typo-2');
    cardName.classList.remove('typo-3');
    cardJob.classList.add('typo-2');
    cardJob.classList.remove('typo-3');
  } else {
    cardName.classList.add('typo-3');
    cardName.classList.remove('typo-2');
    cardJob.classList.add('typo-3');
    cardJob.classList.remove('typo-2');
  }
}

for (const t of inputRadio) {
  t.addEventListener('click', applyTypo);
}

'use strict';
const job = document.querySelector('#job');
const name = document.querySelector('#fullName');
const cardJob = document.querySelector('.card__data-job');
const cardName = document.querySelector('.card__data-name');

function fillName(event) {
  const nameField = event.currentTarget;
  if (nameField.value !== '') {
    cardName.innerHTML = nameField.value;
  } else {
    cardName.innerHTML = 'Nombre y Apellido';
  }
  dataJason.name = nameField.value;
}

name.addEventListener('keyup', fillName);

function fillJob(event) {
  const jobField = event.currentTarget;

  if (jobField.value !== '') {
    cardJob.innerHTML = jobField.value;
  } else {
    cardJob.innerHTML = 'Front end Developer';
  }

  dataJason.job = jobField.value;
}

job.addEventListener('keyup', fillJob);

'use strict';
const fr = new FileReader();
const uploadBtn = document.querySelector('.btn__add-img');
const fileField = document.querySelector('#btn__add-img');
const profileImage = document.querySelector('.card__img');
const divPreviewImage = document.querySelector('.square__img');

function getImage(e) {
  const myFile = e.currentTarget.files[0];
  fr.addEventListener('load', writeImage);
  fr.readAsDataURL(myFile);
}

function writeImage() {
  profileImage.style.backgroundImage = `url(${fr.result})`;
  divPreviewImage.style.backgroundImage = `url(${fr.result})`;
  dataJason.photo = fr.result;
}

function fakeFileClick() {
  fileField.click();
}

fileField.addEventListener('change', getImage);
uploadBtn.addEventListener('click', fakeFileClick);

'use strict';
const iconContainer=document.querySelector('.card__contact');
const allData = document.querySelectorAll('.info__details');
const email = document.getElementById('email');
const emailIcon=document.getElementById('icon__email');

function fillEmail(e) {
  const emailField = e.currentTarget;
  dataJason.email = emailField.value;
  if (email.value.length !== 0) {
    contactIcons[1].classList.remove('hidden');
    contactIcons[1].classList.remove('opacity');

    email.value = emailField.value;
  } else {
    contactIcons[1].classList.add('hidden');
    contactIcons[1].classList.add('opacity');
  }
}
email.addEventListener('input', fillEmail);


const phoneNumber = document.getElementById('phone__number');
const phoneIcon= document.getElementById('icon__phone');

function fillPhone(e) {
  const phoneField = e.currentTarget;
  dataJason.phone = phoneField.value;
  if (phoneNumber.value.length !== 0) {
    contactIcons[0].classList.remove('hidden');
    contactIcons[0].classList.remove('opacity');
    phoneNumber.value = phoneField.value;
  } else {
    contactIcons[0].classList.add('hidden');
    contactIcons[0].classList.add('opacity');
  }
}
phoneNumber.addEventListener('input', fillPhone);

const linkedin = document.getElementById('linkedin__net');

function fillLinkedin(e) {
  const linkedinField = e.currentTarget;
  dataJason.linkedin = linkedinField.value;
  if (linkedin.value.length !== 0) {
    contactIcons[2].classList.remove('hidden');
    contactIcons[2].classList.remove('opacity');

    linkedin.value = linkedinField.value;
  } else {
    contactIcons[2].classList.add('hidden');
    contactIcons[2].classList.add('opacity');
  }
}
linkedin.addEventListener('input', fillLinkedin);

const github = document.getElementById('gitHub__net');

function fillGithub(e) {
  const githubField = e.currentTarget;
  dataJason.github = githubField.value;
  if (github.value.length !== 0) {
    contactIcons[3].classList.remove('hidden');
    contactIcons[3].classList.remove('opacity');

    github.value = githubField.value;
  } else {
    contactIcons[3].classList.add('hidden');
    contactIcons[3].classList.add('opacity');
  }
}

github.addEventListener('input', fillGithub);




'use strict';
let apiSkills;

const skillsForm = document.querySelector('.form__skills-datacheckbox');
const paintSkillsContainer = document.querySelector('.card__skills');

function askForSkills() {
  fetch('https://raw.githubusercontent.com/Adalab/dorcas-s2-proyecto-data/master/skills.json')
    .then(apiSkillsResponse => apiSkillsResponse.json())
    .then(apiSkillsData => {
      let emptySkills = [];
      const skillsLength = apiSkillsData.skills.length;
      for (let i = 0; i < skillsLength; i++) {
        emptySkills.push(apiSkillsData.skills[i]);
        skillsForm.innerHTML += `<div class="form__skills">
        <label for="skills-data">
            <input id="skills-data1" class="skills__checkbox" type="checkbox" value="${[i]}" name="${emptySkills[i]}">
            ${emptySkills[i]}
        </label></div>
        `;
      }

      const checkList = document.querySelectorAll('.skills__checkbox');

      function checkBoxLimit() {
        let count = 0;
        for (let i = 0; i < checkList.length; i++) {
          if (checkList[i].checked) {
            count += 1;
          }
        }
        if (count >= 3) {
          for (let i = 0; i < checkList.length; i++) {
            if (!checkList[i].checked) {
              checkList[i].disabled = true;
            }
          }

        } else {
          for (let i = 0; i < checkList.length; i++) {
            if (!checkList[i].checked) {
              checkList[i].disabled = false;

            }
          }
        }
      }

      function skillCheck() {
        let p = '';
        for (const c of colors) {
          if (c.checked === true) {
            p = parseInt(c.value);
          }
        }
        let skillsTags = '';
        let arraySkills = [];

        for (const forCheck of checkList) {
          if (forCheck.checked === true) {
            let cardItemcolor = '';
            if (p === 3) {
              cardItemcolor = 'card__skills-item__color3';
            } else if (p === 2) {
              cardItemcolor = 'card__skills-item__color2';
            } else {
              cardItemcolor = 'card__skills-item__color1';
            }
            skillsTags += `<li class="card__skills-item ${cardItemcolor}">${forCheck.name}</li>`;
            arraySkills.push(forCheck.name);
          }
        }

        dataJason.skills = arraySkills;

        checkBoxLimit();

        paintSkillsContainer.innerHTML = skillsTags;
      }

      for (let i = 0; i < checkList.length; i++) {
        checkList[i].addEventListener('click', skillCheck);
      }
    });
}

askForSkills();

'use strict';

let dataJason = {
  "name": "",
  "job": "",
  "photo": "",
  "palette": 1,
  "typography": 1,
  "email": "",
  "phone": "",
  "linkedin": "",
  "github": "",
  "skills": ["", "", ""]
};

const dataDefault = {
  "name": "",
  "job": "",
  "photo": "",
  "palette": 1,
  "typography": 1,
  "email": "",
  "phone": "",
  "linkedin": "",
  "github": "",
  "skills": ["", "", ""]
};

const btnReset = document.querySelector('.btn__reset');

const resetJason = () => {
  cardName.innerHTML = 'Nombre y Apellido';
  name.value = '';

  cardJob.innerHTML = 'Front end Developer';
  job.value = '';

  profileImage.style.backgroundImage = '';
  divPreviewImage.style.backgroundImage = '';

  phoneNumber.value = '';
  contactIcons[0].classList.add('opacity');

  email.value = '';
  contactIcons[1].classList.add('opacity');

  linkedin.value = '';
  contactIcons[2].classList.add('opacity');

  github.value = '';
  contactIcons[3].classList.add('opacity');

  cardData.classList.add('card-data__color1');
  cardData.classList.remove('card-data__color2', 'card-data__color3');

  for (const icon of contactIcons) {
    icon.classList.add('contact-icons__color1');
    icon.classList.remove('contact-icons__color2', 'contact-icons__color3');
  }

  paintSkillsContainer.innerHTML = '<li class="card__skills-item card__skills-item__color1  opacity">html</li><li class="card__skills-item card__skills-item__color1  opacity">css</li><li class="card__skills-item card__skills-item__color1  opacity">gulp</li>';

  const checkList = document.querySelectorAll('.skills__checkbox');
  for (let i = 0; i < checkList.length; i++) {
    checkList[i].checked = false;
  }

  colors[0].checked = true;

  cardName.classList.remove('typo-2', 'typo-3');
  cardJob.classList.remove('typo-2', 'typo-3');

  inputRadio[0].checked = true;

  dataJason = dataDefault;
};

btnReset.addEventListener('click', resetJason);

'use strict';
const twitterDiv = document.querySelector('.share__twitter');
const cardCreator = document.querySelector('.btn__create-card');
const twitter = document.querySelector('.twitter-share-button');

function sendCard() {
  fetch('https://us-central1-awesome-cards-cf6f0.cloudfunctions.net/card/', {
    method: 'POST',
    body: JSON.stringify(dataJason),
    headers: {
      'content-type': 'application/json'
    },
  })
    .then(urlResponse => urlResponse.json())
    .then(url => {
      const twitterUrl = document.createElement('div');
      const urlResult = document.createTextNode(`${url.cardURL}`);
      twitterUrl.className = 'twitter__card--url';
      twitterUrl.appendChild(urlResult);
      twitterDiv.appendChild(twitterUrl);
      twitter.href = `https://twitter.com/intent/tweet?text=Esta%20es%20mi%20tarjeta%3A&hashtags=adalab%20${url.cardURL}`;
    });
  createCard();
}

function createCard() {
  cardCreator.classList.add('btn__create-card--done');
  twitterDiv.classList.remove('twitter__hidden');
}

cardCreator.addEventListener('click', sendCard);
