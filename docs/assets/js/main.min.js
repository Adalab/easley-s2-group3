'use strict';

/* // Si contiene la clase hidden
if (activableSection.classList.contains('hidden')) {
  // Elimina la clase
  activableSection.classList.remove('hidden');
} else { // Sino
  // Añade la clase hidden
  activableSection.classList.add('hidden');
}
//Desplegables */

const open = document.querySelectorAll('.bar__menu-card');
const contDesign = document.querySelector('.container__radios');
const contFill = document.querySelector('.container__fill');
const contShare = document.querySelector('.share_btn--container');

const handlerDesign = () => {

  if (contDesign.classList.contains('hidden')) {
    contDesign.classList.remove('hidden');
    contFill.classList.add('hidden');
    contShare.classList.add('hidden');
  } else {
    contDesign.classList.add('hidden');
  }
};

const handlerFill = () => {
  if (contFill.classList.contains('hidden')) {
    contFill.classList.remove('hidden');
    contDesign.classList.add('hidden');
    contShare.classList.add('hidden');
  } else {
    contFill.classList.add('hidden');
  }
};

const handlerShare = () => {
  if (contShare.classList.contains('hidden')) {
    contShare.classList.remove('hidden');
    contDesign.classList.add('hidden');
    contFill.classList.add('hidden');
  } else {
    contShare.classList.add('hidden');
  }
};
open[0].addEventListener('click', handlerDesign);
open[1].addEventListener('click', handlerFill);
open[2].addEventListener('click', handlerShare);

'use strict';
//Paleta de colores
const colors = document.querySelectorAll('.radio__button--color');

//Objeto HTML que cambia de color
const cardData = document.querySelector('.card__data');

//Listas de objetos HTML que cambian de color
const contactIcons = document.querySelectorAll('.contact-icons');

function applyPalette(e) {
  const p = parseInt(e.currentTarget.value);
  const skillsTags = document.querySelectorAll('.card__skills-item');

  console.log('>', p);
  dataJason.palette = p;

  if (p === 1) {
    /* En el caso del cardData, lo estamos manejando como un objeto HTML.
    Igual que en el ejemplo CodePen de Carlos */

    //Objeto cardData
    cardData.classList.add('card-data__color1');
    cardData.classList.remove('card-data__color2', 'card-data__color3');

    /* Pero en el caso de los iconos y los skills, estos tienen que ser manejados como
    listas de objetos HTML. Por eso usamos "querySelectorAll" en lugar de "querySelector" y
    hacemos un "for" para aplicar los cambios a todos sus elementos */

    //Lista de Iconos
    for (const icon of contactIcons) {
      icon.classList.add('contact-icons__color1');
      icon.classList.remove('contact-icons__color2', 'contact-icons__color3');
    }

    //Lista de Tags
    for (const tag of skillsTags) {
      tag.classList.add('card__skills-item__color1');
      tag.classList.remove('card__skills-item__color2', 'card__skills-item__color3');
    }
  } else if (p === 2) {
    cardData.classList.add('card-data__color2');
    cardData.classList.remove('card-data__color1', 'card-data__color3');
    for (const icon of contactIcons) {
      icon.classList.add('contact-icons__color2');
      icon.classList.remove('contact-icons__color1', 'contact-icons__color3');
    }
    for (const tag of skillsTags) {
      tag.classList.add('card__skills-item__color2');
      tag.classList.remove('card__skills-item__color1', 'card__skills-item__color3');
    }
  } else {
    cardData.classList.add('card-data__color3');
    cardData.classList.remove('card-data__color1', 'card-data__color2');
    for (const icon of contactIcons) {
      icon.classList.add('contact-icons__color3');
      icon.classList.remove('contact-icons__color1', 'contact-icons__color2');
    }
    for (const tag of skillsTags) {
      tag.classList.add('card__skills-item__color3');
      tag.classList.remove('card__skills-item__color1', 'card__skills-item__color2');
    }
  }
}
// En este caso, no se porque... no me funciona con 'click' y si con 'change'
for (const c of colors) {
  c.addEventListener('change', applyPalette);
}

'use strict';
//CAMBIAR TIPOGRAFIA

const inputRadio = document.querySelectorAll('.typo__radio');

function applyTypo(e) {
  const q = parseInt(e.currentTarget.value);
  dataJason.typography = q;


  if (q === 1) {
    // typo por defecto
    cardName.classList.remove('typo-2', 'typo-3');
    cardJob.classList.remove('typo-2', 'typo-3');
  } else if (q === 2) {
    // typo 2
    cardName.classList.add('typo-2');
    cardName.classList.remove('typo-3');
    cardJob.classList.add('typo-2');
    cardJob.classList.remove('typo-3');
  } else {
    // typo 3
    cardName.classList.add('typo-3');
    cardName.classList.remove('typo-2');
    cardJob.classList.add('typo-3');
    cardJob.classList.remove('typo-2');
  }
}

for (const t of inputRadio) {
  t.addEventListener('click', applyTypo);
}

'use strict';
//Sustituir nombre y profesión
const job = document.querySelector('#job');
const name = document.querySelector('#fullName');
const cardJob = document.querySelector('.card__data-job');
const cardName = document.querySelector('.card__data-name');

function fillName(event) {
  const nameField = event.currentTarget;

  if (nameField.value !== '') {
    cardName.innerHTML = nameField.value;
  } else {
    cardName.innerHTML = 'Nombre y Apellido';
  }

  dataJason.name = nameField.value;
}

name.addEventListener('keyup', fillName);

function fillJob(event) {
  const jobField = event.currentTarget;

  if (jobField.value !== '') {
    cardJob.innerHTML = jobField.value;
  } else {
    cardJob.innerHTML = 'Front end Developer';
  }

  dataJason.job = jobField.value;
}

job.addEventListener('keyup', fillJob);

'use strict';
// Añadir imagen

const fr = new FileReader();
const uploadBtn = document.querySelector('.btn__add-img');
const fileField = document.querySelector('#btn__add-img');
const profileImage = document.querySelector('.card__img');
const divPreviewImage = document.querySelector('.square__img');

function getImage(e) {
  const myFile = e.currentTarget.files[0];
  fr.addEventListener('load', writeImage);
  fr.readAsDataURL(myFile);
}

function writeImage() {
  profileImage.style.backgroundImage = `url(${fr.result})`;
  divPreviewImage.style.backgroundImage = `url(${fr.result})`;
  dataJason.photo = fr.result;
}

function fakeFileClick() {
  fileField.click();
}

fileField.addEventListener('change', getImage);
uploadBtn.addEventListener('click', fakeFileClick);

'use strict';
// DATOS: MAIL, TELEFONO, LINKEDIN, GITHUB

// ya definido arriba const contactIcons = document.querySelectorAll('.contact-icons');

// quiero que todos los campos si tienen la clase hidden. que la eliminen
// hasta que uno de los campos tenga un valor no igual a vacio.
const iconContainer=document.querySelector('.card__contact');
const allData = document.querySelectorAll('.info__details');
const email = document.getElementById('email');
const emailIcon=document.getElementById('icon__email');

function fillEmail(e) {
  const emailField = e.currentTarget;
  dataJason.email = emailField.value;
  if (email.value.length !== 0) {
    contactIcons[1].classList.remove('hidden');
    contactIcons[1].classList.remove('opacity');

    email.value = emailField.value;
  } else {
    contactIcons[1].classList.add('hidden');
    contactIcons[1].classList.add('opacity');

    console.log('este campo esta vacio');
  }
}
email.addEventListener('input', fillEmail);


const phoneNumber = document.getElementById('phone__number');
const phoneIcon= document.getElementById('icon__phone');

function fillPhone(e) {
  const phoneField = e.currentTarget;
  dataJason.phone = phoneField.value;
  if (phoneNumber.value.length !== 0) {
    contactIcons[0].classList.remove('hidden');
    contactIcons[0].classList.remove('opacity');
    phoneNumber.value = phoneField.value;
  } else {
    contactIcons[0].classList.add('hidden');
    contactIcons[0].classList.add('opacity');
    console.log('este campo esta vacio');
  }
}
phoneNumber.addEventListener('input', fillPhone);


const linkedin = document.getElementById('linkedin__net');

function fillLinkedin(e) {
  const linkedinField = e.currentTarget;
  dataJason.linkedin = linkedinField.value;
  if (linkedin.value.length !== 0) {
    contactIcons[2].classList.remove('hidden');
    contactIcons[2].classList.remove('opacity');

    linkedin.value = linkedinField.value;
  } else {
    contactIcons[2].classList.add('hidden');
    contactIcons[2].classList.add('opacity');

    console.log('este campo esta vacio');
  }
}
linkedin.addEventListener('input', fillLinkedin);


const github = document.getElementById('gitHub__net');

function fillGithub(e) {
  const githubField = e.currentTarget;
  dataJason.github = githubField.value;
  if (github.value.length !== 0) {
    contactIcons[3].classList.remove('hidden');
    contactIcons[3].classList.remove('opacity');

    github.value = githubField.value;
  } else {
    contactIcons[3].classList.add('hidden');
    contactIcons[3].classList.add('opacity');

    console.log('este campo esta vacio');
  }
}
github.addEventListener('input', fillGithub);




'use strict';
//Hacer la petición de las Skills
let apiSkills;

const skillsForm = document.querySelector('.form__skills-datacheckbox');
const paintSkillsContainer = document.querySelector('.card__skills');

function askForSkills() {
  fetch('https://raw.githubusercontent.com/Adalab/dorcas-s2-proyecto-data/master/skills.json')
    .then(apiSkillsResponse => apiSkillsResponse.json())
    .then(apiSkillsData => {
      //Hay que declarar la variable como array (vacío) y no con comillas simples porque si no devuelve una cadena.
      let emptySkills = [];
      //Declaras una nueva variable para definir la longitud del array
      const skillsLength = apiSkillsData.skills.length;
      //Haces un bucle para recorrer la información recibida. Si en vez de skillsLength pones  apiSkillsData.skills.length no funciona, por eso hemos declarado previamente una variable
      for (let i = 0; i < skillsLength; i++) {
        //Push sirve para meter dentro del array vació los elementos del array que hemos recibido
        emptySkills.push(apiSkillsData.skills[i]);
        skillsForm.innerHTML += `<div class="form__skills">
        <label for="skills-data">
            <input id="skills-data1" class="skills__checkbox" type="checkbox" value="${[i]}" name="${emptySkills[i]}">
            ${emptySkills[i]}
        </label></div>
        `;
      }

      const checkList = document.querySelectorAll('.skills__checkbox');

      // LIMITAR A 3 MAXIMO
      function checkBoxLimit() {
        // creo un contador para que me cuente los checks y lo pongo a cero
        let count = 0;
        // para la lista que me cree, cuadno se chequee, que me vaya sumando.
        for (let i = 0; i < checkList.length; i++) {
          if (checkList[i].checked) {
            count += 1;
          }
        }
        // si selecionas 3 o mas de tres,
        if (count >= 3) {
          for (let i = 0; i < checkList.length; i++) {
            //! devuelve el valor contrario al valor dado.
            // no me dejes clickear más = deja que el resto este sin uso.
            if (!checkList[i].checked) {
              checkList[i].disabled = true;
            }
          }

        } else {
          for (let i = 0; i < checkList.length; i++) {
            if (!checkList[i].checked) {
              checkList[i].disabled= false;

            }
          }
        }
      }

      //FUNCIONA CON UNO
      // const checkList = document.querySelector('.skills__checkbox');
      // const paintSkillsContainer= document.querySelector('.card__skills');
      // const nonCheckSkills=checkList.checked;
      // console.log (nonCheckSkills);
      // const skillCheck = (e) => {
      //   const b = e.currentTarget;
      //   const isChecked = b.checked;
      //   console.log(isChecked);
      //   if (isChecked===true){
      //     paintSkillsContainer.innerHTML=`<li id="skill__1" class="card__skills-item card__skills-item__color1">html</li>`;
      //   }
      // }
      // checkList.addEventListener('click', skillCheck);

      function skillCheck() {
        // Primero sacamos el valor checkeado de colors para luego aplicar el estilo correspondiente
        let p = '';
        for (const c of colors) {
          if (c.checked === true) {
            p = parseInt(c.value);
          }
        }
        // Recorremos las skills para crearlas con el estilo y texto correpondiente y manejamos el array que gusrdaremos en el JSON
        let skillsTags = '';
        let arraySkills = [];

        for (const forCheck of checkList) {
          if (forCheck.checked === true) {
            // Gestionamos el color a través de los estilos
            let cardItemcolor = '';
            if (p === 3) {
              cardItemcolor = 'card__skills-item__color3';
            } else if (p === 2) {
              cardItemcolor = 'card__skills-item__color2';
            } else {
              cardItemcolor = 'card__skills-item__color1';
            }
            // Creamos/Añadimos elementos
            skillsTags += `<li class="card__skills-item ${cardItemcolor}">${forCheck.name}</li>`;

            //Añadimos elementos al array de valores checkeados para guardarlo posteriormente en el JSON
            arraySkills.push(forCheck.name);
          }
        }
        //Guardamos el array de skills generados al JSON
        dataJason.skills = arraySkills;

        checkBoxLimit();

        paintSkillsContainer.innerHTML = skillsTags;

        // for (const check of checkList) {
        //   check.addEventListener('click', skillCheck);
        // }
      }

      for (let i = 0; i < checkList.length; i++) {
        checkList[i].addEventListener('click', skillCheck);
      }
    });

}

askForSkills();


// const skillCheck = (e) => {
//   const paco = e.currentTarget;
//   const isChecked = paco.checked;
//   console.log(isChecked);
// if (isChecked === true) {
//   paintSkillsContainer.innerHTML += `<li class="card__skills-item card__skills-item__color1">${paco.name}</li>`;
// } else if (isChecked === false) {
//   paintSkillsContainer.remove(`<li class="card__skills-item card__skills-item__color1">${paco.name}</li>`);
// }

// for (const check of checkList) {
//   check.addEventListener('click', skillCheck);
// }
// for(let i=0; i<checkList[i].length;i++){
//   console.log(checkList[i]);
//   }

// function checkBoxLimit() {
//   const checkBoxGroup = document.querySelectorAll('.skills__checkbox');
//   const limit = 3;
//   for (let i = 0; i < checkBoxGroup.length; i++) {
//     checkBoxGroup[i].onclick = function () {
//       let checkedcount = 0;
//       for (let i = 0; i < checkBoxGroup.length; i++) {
//         checkedcount += (checkBoxGroup[i].checked) ? 1 : 0;
//       }
//       if (checkedcount > limit) {
//         alert("Elige un máximo de " + limit + " habilidades.");
//         this.checked = false;
//       }
//     }
//   }
// }

'use strict';

let dataJason = {
  "name": "",
  "job": "",
  "photo": "",
  "palette": 1,
  "typography": 1,
  "email": "",
  "phone": "",
  "linkedin": "",
  "github": "",
  "skills": ["", "", ""]
};

const dataDefault = {
  "name": "",
  "job": "",
  "photo": "",
  "palette": 1,
  "typography": 1,
  "email": "",
  "phone": "",
  "linkedin": "",
  "github": "",
  "skills": ["", "", ""]
};

const btnReset = document.querySelector('.btn__reset');

const resetJason = () => {
  cardName.innerHTML = 'Nombre y Apellido';
  name.value = '';

  cardJob.innerHTML = 'Front end Developer';
  job.value = '';

  profileImage.style.backgroundImage = '';
  divPreviewImage.style.backgroundImage = '';

  phoneNumber.value = '';
  contactIcons[0].classList.add('opacity');

  email.value = '';
  contactIcons[1].classList.add('opacity');

  linkedin.value = '';
  contactIcons[2].classList.add('opacity');

  github.value = '';
  contactIcons[3].classList.add('opacity');

  //Paleta de colores por defecto
  cardData.classList.add('card-data__color1');
  cardData.classList.remove('card-data__color2', 'card-data__color3');

  //Lista de Iconos
  for (const icon of contactIcons) {
    icon.classList.add('contact-icons__color1');
    icon.classList.remove('contact-icons__color2', 'contact-icons__color3');
  }

  //Lista de Tags
  paintSkillsContainer.innerHTML = '<li class="card__skills-item card__skills-item__color1  opacity">html</li><li class="card__skills-item card__skills-item__color1  opacity">css</li><li class="card__skills-item card__skills-item__color1  opacity">gulp</li>';

  // Lista de checks
  const checkList = document.querySelectorAll('.skills__checkbox');
  for (let i = 0; i < checkList.length; i++) {
    checkList[i].checked= false;
  }

  // Lista de radios colores
  colors[0].checked = true;

  //Tipografía por defecto
  cardName.classList.remove('typo-2', 'typo-3');
  cardJob.classList.remove('typo-2', 'typo-3');

  //Lista de radios typos
  inputRadio[0].checked = true;

  //Resetamos valores JSON
  dataJason = dataDefault;
};

btnReset.addEventListener('click', resetJason);

'use strict';
const twitterDiv = document.querySelector('.share__twitter');
const cardCreator = document.querySelector('.btn__create-card');
const twitter = document.querySelector('.twitter-share-button');
function sendCard() {
  fetch('https://us-central1-awesome-cards-cf6f0.cloudfunctions.net/card/', {
    method: 'POST',
    body: JSON.stringify(dataJason),
    headers: {
      'content-type': 'application/json'
    },
  })
    .then(urlResponse => urlResponse.json())
    .then(url => {
      // twitterDiv.innerHTML = `<a href="${url.cardURL}" target="_blank">${url.cardURL}</a>`;
      const twitterUrl = document.createElement('div');
      const urlResult = document.createTextNode(`${url.cardURL}`);
      twitterUrl.className = 'twitter__card--url';
      twitterUrl.appendChild(urlResult);
      twitterDiv.appendChild(twitterUrl);
      twitter.href = `https://twitter.com/intent/tweet?text=Esta%20es%20mi%20tarjeta%3A&hashtags=adalab%20${url.cardURL}`;
    });
  createCard();
}

//Cuando pulse en crear tarjeta
function createCard() {
  //Le añades una clase que para que no sea naranja
  cardCreator.classList.add('btn__create-card--done');
  //Le quitas la clase twitter_ hidden a twitterDiv
  twitterDiv.classList.remove('twitter__hidden');
}
cardCreator.addEventListener('click', sendCard);

//Envías datos a la API
//y devuelves la URL de la API

console.log(dataJason);


//Hay que revisar que cuando están colapsados no hay margin-bottom en form__fieldset pero cuando se abren sí
